name: CI Pipeline

on:
  push:
    tags: 
      - "v*"
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

permissions:
  contents: read
  security-events: write



jobs:
  # hadolint:
  #   name: Run Hadolint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Hadolint
  #       uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183
  #       with:
  #         dockerfile: ./Dockerfile
  #         format: sarif
  #         output-file: hadolint-results.sarif
  #         no-fail: true
          
  #     - name: Upload Hadolint results
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: hadolint-results.sarif
  #         wait-for-processing: true

  # super-linter:
  #   name: Run Super Linter 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Super Linter
  #       uses: github/super-linter/slim@v5
  #       env:
  #         DEFAULT_BRANCH: master
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #         VALIDATE_ALL_CODEBASE: false
  #         VALIDATE_DOCKER_FILE: true
  #         VALIDATE_PYTHON: true
  
  # docker-build-push:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [hadolint, super-linter]
  #   env: 
  #     IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ocean_app
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Get version from Git tag
  #       id: version
  #       run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      
  #     - name: Build and tag Docker image
  #       run: |
  #         docker build -t $IMAGE_NAME:$VERSION .
  #         docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:latest

  #     - name: Push Docker image
  #       run: |
  #         docker push $IMAGE_NAME:$VERSION
  #         docker push $IMAGE_NAME:latest

  update-k8s-manifest:
    name: Update Kubernetes manifests with newest image version of Flask App
    runs-on: ubuntu-latest
   # needs: docker-build-push
    steps:
      - name: Checkout manifests repository
        uses: actions/checkout@v4
        with: 
          repository: netkovjordan/CD---ArgoCD-Workflow
          token: ${{ secrets.GH_TOKEN }}


      - name: Get version from Git tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set IMAGE_NAME as an environment variable
        run: echo "IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/ocean_app" >> $GITHUB_ENV
      
      - name: Debug envs
        run: |
          echo "IMAGE NAME: $IMAGE_NAME"
          echo "VERSION: $VERSION"
      

      - name: Ensure the YAML file exists
        run: |
          ls ./manifests/deployment.yaml || exit 1  # Fail if the file is not found
      
      - name: Update image version in manifest
        run: |
          sed -n "s|image: .*/ocean_app:[^ ]*|image: $IMAGE_NAME:$VERSION|p" ./manifests/deployment.yaml



      # - name: Commit and push updated manifest of deployment
      #   run: |
      #     git config --global user.name "Github Actions"
      #     git config --global user.email "actions@github.com"
      #     git add ./manifests/deployment.yaml
      #     git commit -m "Update image version to $VERSION"
      #     git push origin master
